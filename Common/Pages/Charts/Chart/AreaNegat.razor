@page "/chart/negative-area"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;

<SampleDescription>
    <p>This sample illustrates an area series with negative points. Data points with negative points are shown here.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render an area series with negative points. Also, a legend is enabled in the shape of the series type.</p>
    <p>More information about the negative points can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/working-with-data#empty-points'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Profit and Loss" Width="@Width" Theme="@Theme">
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
        <ChartPrimaryXAxis  ValueType="Syncfusion.Blazor.Charts.ValueType.Category" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisLabelStyle FontStyle="bold"></ChartAxisLabelStyle>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis LabelFormat="${value}" Minimum="-4000" Maximum="8000" Interval="2000">
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@MaryValues" Name="Company A" XName="Vegetable" Width="2"
                         Opacity="0.75" YName="Price" Type="ChartSeriesType.Area">
                <ChartMarker IsFilled="true" Visible="true" Height="7" Width="7" Shape="ChartShape.Circle">
                </ChartMarker>
                <ChartSeriesBorder Width="2"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries DataSource="@PatriciaValues" Name="Company B" XName="Vegetable" Width="2"
                         Opacity="0.75" YName="Price" Type="ChartSeriesType.Area">
                <ChartMarker IsFilled="true" Visible="true" Height="7" Width="7" Shape="ChartShape.Diamond">
                </ChartMarker>
                <ChartSeriesBorder Width="2"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries DataSource="@LindaValues" Name="Company C" XName="Vegetable" Width="2"
                         Opacity="0.75" YName="Price" Type="ChartSeriesType.Area">
                <ChartMarker IsFilled="true" Visible="true" Height="5" Width="5" Shape="ChartShape.Rectangle">
                </ChartMarker>
                <ChartSeriesBorder Width="2"></ChartSeriesBorder>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>

@code{

    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";

    public List<AreaEmptyChartData> MaryValues { get; set; } = new List<AreaEmptyChartData>
{
        new AreaEmptyChartData { Vegetable = "Onion",  Price = 3000 },
        new AreaEmptyChartData { Vegetable = "Potato", Price = 4000 },
        new AreaEmptyChartData { Vegetable = "Tomato", Price = -4000 },
        new AreaEmptyChartData { Vegetable = "Corn", Price = -2000 },
        new AreaEmptyChartData { Vegetable = "Carrot", Price = 5000 }
    };

    public List<AreaEmptyChartData> PatriciaValues { get; set; } = new List<AreaEmptyChartData>
{
        new AreaEmptyChartData { Vegetable = "Onion",  Price = 2000 },
        new AreaEmptyChartData { Vegetable = "Potato", Price = 3000 },
        new AreaEmptyChartData { Vegetable = "Tomato", Price = 4000 },
        new AreaEmptyChartData { Vegetable = "Corn", Price = 2000 },
        new AreaEmptyChartData { Vegetable = "Carrot", Price = 3000 }
    };

    public List<AreaEmptyChartData> LindaValues { get; set; } = new List<AreaEmptyChartData>
{
        new AreaEmptyChartData { Vegetable = "Onion",  Price = 2000 },
        new AreaEmptyChartData { Vegetable = "Potato", Price = -1000 },
        new AreaEmptyChartData { Vegetable = "Tomato", Price = -3000 },
        new AreaEmptyChartData { Vegetable = "Corn", Price = 4000 },
        new AreaEmptyChartData { Vegetable = "Carrot", Price = 1000 }
    };

    public class AreaEmptyChartData
    {
        public string Vegetable { get; set; }
        public double Price { get; set; }
    }

    protected override void OnInitialized()
    {
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            if (SampleService.IsDevice)
            {
                Width = "100%";
                StateHasChanged();
            }
        }
    }

}
